// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// compute_u_j
NumericVector compute_u_j(int j, NumericVector status, NumericMatrix mat, NumericVector times, NumericMatrix S0, NumericMatrix S1j, int n, int S, NumericVector lms, double w);
RcppExport SEXP _IplBoost_compute_u_j(SEXP jSEXP, SEXP statusSEXP, SEXP matSEXP, SEXP timesSEXP, SEXP S0SEXP, SEXP S1jSEXP, SEXP nSEXP, SEXP SSEXP, SEXP lmsSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type status(statusSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S1j(S1jSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lms(lmsSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_u_j(j, status, mat, times, S0, S1j, n, S, lms, w));
    return rcpp_result_gen;
END_RCPP
}
// compute_negI_j
NumericVector compute_negI_j(int j, NumericVector status, NumericVector times, NumericMatrix S0, NumericMatrix S1j, NumericMatrix S2j, int n, int S, NumericVector lms, double w, NumericVector lambda);
RcppExport SEXP _IplBoost_compute_negI_j(SEXP jSEXP, SEXP statusSEXP, SEXP timesSEXP, SEXP S0SEXP, SEXP S1jSEXP, SEXP S2jSEXP, SEXP nSEXP, SEXP SSEXP, SEXP lmsSEXP, SEXP wSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type status(statusSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S1j(S1jSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type S2j(S2jSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lms(lmsSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_negI_j(j, status, times, S0, S1j, S2j, n, S, lms, w, lambda));
    return rcpp_result_gen;
END_RCPP
}
// compute_ipl
double compute_ipl(NumericVector times, NumericVector status, NumericMatrix mat, NumericMatrix betas, NumericVector lms, double w, int S, int n, int p);
RcppExport SEXP _IplBoost_compute_ipl(SEXP timesSEXP, SEXP statusSEXP, SEXP matSEXP, SEXP betasSEXP, SEXP lmsSEXP, SEXP wSEXP, SEXP SSEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type status(statusSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lms(lmsSEXP);
    Rcpp::traits::input_parameter< double >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_ipl(times, status, mat, betas, lms, w, S, n, p));
    return rcpp_result_gen;
END_RCPP
}
// scale_columns
void scale_columns(NumericMatrix mat, NumericVector vec, int m, int n);
RcppExport SEXP _IplBoost_scale_columns(SEXP matSEXP, SEXP vecSEXP, SEXP mSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    scale_columns(mat, vec, m, n);
    return R_NilValue;
END_RCPP
}
// compute_S0
NumericMatrix compute_S0(NumericMatrix risk, int n, int S);
RcppExport SEXP _IplBoost_compute_S0(SEXP riskSEXP, SEXP nSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type risk(riskSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_S0(risk, n, S));
    return rcpp_result_gen;
END_RCPP
}
// compute_S1_j
NumericMatrix compute_S1_j(int j, NumericMatrix risk, NumericMatrix mat, int n, int S);
RcppExport SEXP _IplBoost_compute_S1_j(SEXP jSEXP, SEXP riskSEXP, SEXP matSEXP, SEXP nSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type risk(riskSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_S1_j(j, risk, mat, n, S));
    return rcpp_result_gen;
END_RCPP
}
// compute_S2_j
NumericMatrix compute_S2_j(int j, NumericMatrix risk, NumericMatrix mat, int n, int S);
RcppExport SEXP _IplBoost_compute_S2_j(SEXP jSEXP, SEXP riskSEXP, SEXP matSEXP, SEXP nSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type risk(riskSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_S2_j(j, risk, mat, n, S));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_IplBoost_compute_u_j", (DL_FUNC) &_IplBoost_compute_u_j, 10},
    {"_IplBoost_compute_negI_j", (DL_FUNC) &_IplBoost_compute_negI_j, 11},
    {"_IplBoost_compute_ipl", (DL_FUNC) &_IplBoost_compute_ipl, 9},
    {"_IplBoost_scale_columns", (DL_FUNC) &_IplBoost_scale_columns, 4},
    {"_IplBoost_compute_S0", (DL_FUNC) &_IplBoost_compute_S0, 3},
    {"_IplBoost_compute_S1_j", (DL_FUNC) &_IplBoost_compute_S1_j, 5},
    {"_IplBoost_compute_S2_j", (DL_FUNC) &_IplBoost_compute_S2_j, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_IplBoost(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
